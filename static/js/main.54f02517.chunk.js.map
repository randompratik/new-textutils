{"version":3,"sources":["Components/Alert.js","Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","class","type","role","msg","Navbar","prop","currMode","mode","className","href","title","id","home","onClick","toggleMode","for","TextForm","newMode","useState","text","setText","value","onChange","event","target","rows","newText","toUpperCase","toLowerCase","i","indexOf","split","length","defaultProps","App","setmode","setalert","showAlert","message","setTimeout","color","document","body","style","backgroundColor","boxheading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.54f02517.chunk.js","sourcesContent":["import React from 'react'\r\n//import PropTypes from \"prop-types\";\r\nfunction Alert(props) {\r\n    return (\r\n        props.alert && <div>\r\n             <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                  <p>{props.alert.msg}</p>\r\n               \r\n                </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(prop) {\r\n     let currMode;\r\n     if(prop.mode===\"dark\")\r\n        currMode=\"light\";\r\n        else\r\n        currMode=\"dark\";\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${prop.mode} bg-${prop.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {prop.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  {prop.home}\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">\r\n                  About\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            <div class={`form-check form-switch text-${currMode}`}>\r\n              <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={()=>{prop.toggleMode(\"black\")}}/>\r\n              <label class=\"form-check-label\" for=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n            </div>\r\n            <div class={`form-check form-switch text-${currMode}`}>\r\n              <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={()=>{prop.toggleMode(\"#d59300\")}}/>\r\n              <label class=\"form-check-label\" for=\"flexSwitchCheckDefault\">Blue Filter</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string, home: PropTypes.string };\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  home: \"homme page should be here\",\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nexport default function TextForm(prop) {\r\n  const [text, setText] = useState(\"Enter the text here\");\r\n  const handleclickUpper = () => {\r\n    //console.log(\"button is clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    prop.alert(\"Converted to Upper Case \",\"success\");\r\n  };\r\n  const handleclickLower = () => {\r\n    //console.log(\"button is clicked\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    prop.alert(\"Converted to Lower Case \",\"success\");\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleFindOnclick=()=>{\r\n   let newText=text;\r\n   let i=newText.indexOf(\"Hello\");\r\n      if(i===-1)\r\n         setText(\"The word is not available\");\r\n        else \r\n           setText(\"The word is available at index \"+ i); \r\n  }\r\n  const handleClearOnclick=()=>{\r\n       setText(\"\");\r\n       prop.alert(\"Text Cleared \",\"success\");\r\n  }\r\n\r\n      let newMode;\r\n      if(prop.mode===\"light\"){\r\n          newMode=\"dark\";\r\n      }\r\n      else \r\n      newMode=\"light\";\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-3\">\r\n        <div className=\"mb-3\">\r\n          <h3 className={`text-${newMode}`}>Enter the text to be analyzed</h3>\r\n\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleChange}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-dark mx-3\"\r\n          onClick={handleclickUpper}\r\n        >\r\n          Convert To UpperCase\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-dark mx-3\"\r\n          onClick={handleclickLower}\r\n        >\r\n          Convert To LowerCase\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-dark mx-3\"\r\n          onClick={handleFindOnclick}\r\n        \r\n        >\r\n         Search for Hello\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-dark mx-3\"\r\n          onClick={handleClearOnclick}\r\n        \r\n        >\r\n         Clear\r\n        </button>\r\n           \r\n      \r\n      </div>\r\n      <div className={`container my-3 text-${newMode}`}>\r\n        <h1 >Your Text Summary</h1>\r\n        <p>\r\n          The sentence contains {text.split(\" \").length} words and {text.length}{\" \"}\r\n          character\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nTextForm.propTypes = {\r\n  boxheading: PropTypes.string,\r\n};\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport Alert from \"./Components/Alert\";\n// import About from \"./Components/About\";\nimport Navbar from \"./Components/Navbar\";\nimport TextForm from \"./Components/TextForm\";\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n  \n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n   const toggle=(color)=>{\n     if(mode===\"dark\"){\n           setmode(\"light\");\n           document.body.style.backgroundColor=\"white\";\n           document.body.color=\"black\";\n           showAlert(\"Light mode Enabled\",\"success\");\n          \n     }\n           else {\n          setmode(\"dark\");\n          document.body.style.backgroundColor=color;\n          document.body.color=\"white\";\n          showAlert(\"Dark mode Enabled\",\"success\")\n           }\n   }\n   const [alert, setalert] = useState(null);\n   const showAlert=(message,type)=>{\n       setalert({\n         msg: message,\n         type:type\n       }\n       )\n\n       setTimeout(() => {\n         setalert(null);\n       },2000);\n   }\n       \n  return (\n    // <Router>\n    //   <Navbar title=\"Textutils\" home=\"Home\" mode={mode} toggleMode={toggle}/>\n    //   <Alert alert={alert}/>\n    //   <Routes>\n    //       <Route exact path=\"/\" element={<TextForm boxheading=\"Enter the text to be  analyzed\"  mode={mode} alert={showAlert} />}/>\n    //       <Route exact path=\"/About\" element={<About/>}/>\n    //       {/* <Route exact path=\"/recovery-password\" element={<RecoveryPassword/>}/> */}\n    //       {/* <Route path=\"*\" element={<NotFound/>}/> */}\n    //     </Routes>\n      \n      \n    // </Router>\n\n    <>\n    <Navbar title=\"Textutils\" home=\"Home\" mode={mode} toggleMode={toggle}/>\n     <Alert alert={alert}/>\n     <TextForm boxheading=\"Enter the text to be  analyzed\"  mode={mode} alert={showAlert} />\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}